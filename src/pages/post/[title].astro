---
import Layout from "@/layouts/Layout.astro";
import Date from "@/components/Date.astro";
import { getAllPosts } from "@/repository/post";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { render } from "astro:content";


export const getStaticPaths = (async () => {
	const posts = await getAllPosts();

	return posts.map((post) => ({
		params: { title: post.id },
		props: { post },
	}));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post: entry } = Astro.props;
const { Content } = await render(entry);

const post = entry.data
// TODO: create remark plugin (https://docs.astro.build/en/recipes/reading-time/)
const readingTime: string = '12 min';
---

<Layout>
    <article class="grow break-words" data-pagefind-body>
        <div class="mb-12">
            {post.draft ? <span class="text-base text-red-500">(Draft)</span> : null}
            <h1 class="title">
                {post.title}
            </h1>
            <div class="flex flex-wrap items-center gap-x-3 gap-y-2">
                <p class="font-semibold">
                    <Date date={post.publishDate} /> /{" "}
                    {readingTime}
                </p>
                {
                    post.updatedDate && (
                        <span class="bg-quote/5 text-quote rounded-lg px-2 py-1">
                            Updated:
                            <Date class="ms-1" date={post.updatedDate} />
                        </span>
                    )
                }
            </div>
            {
                !!post.tags?.length && (
                    <div class="mt-2">
                        {post.tags.map((tag, i) => (
                            <>
                                {/* prettier-ignore */}
                                <span class="contents">
                                    <a class="cactus-link inline-block before:content-['#']" data-pagefind-filter={`tag:${tag}`} href={`/tags/${tag}/`}><span class="sr-only">View more blogs with the tag&nbsp;</span>{tag}
                                    </a>{i < post.tags.length - 1 && ", "}
                                </span>
                            </>
                        ))}
                    </div>
                )
            }
        </div>
        <div class="flex gap-10 items-start">
            <!-- {!!headings.length && <TOC headings={headings} />} -->
            <div
                class="prose prose-sm prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-gray-600 prose-headings:hover:before:text-accent sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none"
            >
                <Content />
            </div>
        </div>
    </article>
</Layout>
